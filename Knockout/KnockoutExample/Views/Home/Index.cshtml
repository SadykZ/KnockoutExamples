@{
    ViewBag.Title = "Home Page";
}
<!--
text: привязка к текстовому содержимому элемента html

html: привязка к html-коду элемента

visible: устанавливает видимость привязанного элемента html

css: добавляет или удаляет классы CSS для привязанного элемента html

style: устанавливает привязку к стилю элемента

attr: позволяет установить значения определенных атрибутов элемента
-->
<style>
    .style1 
    {
        color: green;
        font-family: Calibri;
        font-weight: bold;
        font-size: large;
    }
</style>
<div class="row">
    <div class="col-md-12">
        <!-- #1 - Привязка -->
        <h3>&minus;Привязка&minus;</h3>
        <h1>Привет <span data-bind="text: name"></span></h1>

        <hr />

        <!-- #2 - Привязка с условием-->
        <h3>&minus;Привязка с условием&minus;</h3>
        Текущее время: <span data-bind="text: hour"></span>
        <br />
        Сейчас: <span data-bind="text: (hour <= 12) ? 'утро' : 'вечер'"></span>

        <hr />

        <!-- #3 - Привязка с изменением -->
        <h3>&minus;Привязка с изменением&minus;</h3>
        <p data-bind="text: phoneName"></p>
        <p><button id="Button_ChangePhoneName">Изменить</button></p>

        <hr />

        <!-- #5 - VISIBLE -->
        <h3>&minus;Visible&minus;</h3>
        <div data-bind="visible: DivVisible;">
            Скрываемый блок
        </div>
        <button id="Button_ShowHide">Показать/Скрыть</button>

        <hr />

        <!-- #6 - HTML -->
        <h3>&minus;HTML&minus;</h3>
        <h1 data-bind="html: htmlContent"></h1>

        <hr />

        <!-- #7 - CSS -->
        <h3>&minus;CSS&minus;</h3>
        <div data-bind="css: { style1: cssEnabled }">
            Стилизованный блок CSS
        </div>
        <button id="Button_ChangeCss">Переключить CSS</button>

        <hr />

        <!-- #8 - Style -->
        <h3>&minus;Style&minus;</h3>
        <div data-bind="style: {color: customColor}">
            Стилизованный блок Style
        </div>
        <button id="Button_ChangeStyle">Изменть Style</button>

        <hr />

        <!-- #9 - Attr -->
        <h3>&minus;Attr&minus;</h3>
        <a data-bind="attr: { href: attrUrl, title: attrDescription }">Главная</a>

        <hr />

        <!-- #10 - Binding Array to List -->
        <h3>&minus;Binding Array to List&minus;</h3>
        <ul data-bind="foreach: phones">
            <li data-bind="text: $data"></li>
        </ul>

        <hr />

        <!-- #11 - Binding object Array to List -->
        <h3>&minus;Binding object Array to List&minus;</h3>
        <ul data-bind="foreach: cars">
            <li>
                <p data-bind="text: ($index() + 1)"></p>
                <p data-bind="text: mark"></p>
                <p data-bind="text: model"></p>
            </li>
        </ul>

        <hr />

        <!-- #12 - ObservableArray - Наблюдаемые массивы -->
        <h3>&minus;ObservableArray - Наблюдаемые массивы&minus;</h3>
        <ul data-bind="foreach: friends">
            <li>
                <p data-bind="text: name"></p>
                <p data-bind="text: age"></p>
            </li>
        </ul>
        <button id="Button_AddFriend">Добавить</button>

        <hr />

        <!-- #13 - AS - Использование псевдонима -->
        <h3>&minus;AS - Использование псевдонима&minus;</h3>
        <ul data-bind="foreach: {data: computers, as: 'computer'}">
            <li>
                <p data-bind="text: computer.company"></p>
                <p data-bind="text: computer.model"></p>
            </li>
        </ul>

        <hr />

        <!-- #14 - Обратные вызовы привязки foreach -->
        <!--
        afterRender: вызывается, когда сработала самая первая инициализация привязки foreach, и также срабатывает при добавлении нового элемента в массив
        afterAdd: срабатывает каждый раз при добавлении нового элемента в массив
        beforeRemove: срабатывает перед удалением элемента из массива. Как правило, используется для анимации удаления
        beforeMove: вызывается до перемещения элемента внутри массива
        afterMove: вызывается после перемещения элемента внутри массива
        -->
        <h3>&minus;Обратные вызовы привязки foreach&minus;</h3>
        <ul data-bind="foreach: {data: friends, afterAdd: afterAddFriend}">
            <li>
                <p data-bind="text: name"></p>
                <p data-bind="text: age"></p>
            </li>
        </ul>
        <button id="Button_AddFriendWithEvent">Добавить</button>

        <hr />

        <!-- #15 - Привязка IF и IFNOT -->
        <h3>Привязка IF и IFNOT</h3>
        <div class="jumbotron">
            <div data-bind="if: IfVisible">
                Скрытое содержание IF
            </div>
        </div>
        <div class="jumbotron">
            <div data-bind="ifnot: IfVisible">
                Скрытое содержание IF NOT
            </div>
        </div>
        <div class="jumbotron">
            <!-- ko if: IfVisible -->
            <p>Скрытое содержание в комментариях</p>
            <!-- /ko -->
        </div>
        <button id="Button_ShowHideIf">Скрыть/Отобразить</button>

        <hr />

        <!-- #16 - Контект привязки -->
        <!-- Привязка with создает новый контекст привязки, благодаря чему для вложенных элементов устанавливается привязка к определенному объекту внутри ViewModel -->
        <h3>Контекст привязки WITH</h3>

        <div data-bind="with: company">
            <h4 data-bind="text: $parent.model"></h4>
            <p data-bind="text: name"></p>
            <p data-bind="text: country"></p>
            <p>Цена: <span data-bind="text: $parent.price"></span></p>
        </div>

        <hr />

        <!-- #17 - Привязка VALUE и TEXTINPUT -->
        <h3>&minus;Привязка VALUE и TEXTINPUT&minus;</h3>

        <p>Логин: <input data-bind="value: userName"/>(Enter)</p>
        <p>Введенный логин: <span data-bind="text: userName"></span></p>

        <br />

        <p>Роль: <input data-bind="textinput: userRole" /></p>
        <p>Введенная роль: <span data-bind="text: userRole"></span></p>

        <hr />

        <!-- #18 - Привязка checked -->
        <h3>Привязка checked</h3>

        <p><input type="checkbox" data-bind="checked: IsVisible" /><span>Видимость</span></p>
        <div class="jumbotron" data-bind="visible: IsVisible">
            Видимый контент
        </div>

        <br />

        <ul data-bind="foreach: {data: games, as: 'game'}">
            <li>
                <input type="checkbox" data-bind="checked: game.available" />
                <span data-bind="text: game.name"></span>
                (<span data-bind="text: game.year"></span>)
            </li>
        </ul>

        <br />

        <label><input type="radio" value="Alpha" data-bind="checked: radioSelectedOptionValue" />Alpha</label>
        <label><input type="radio" value="Beta" data-bind="checked: radioSelectedOptionValue" />Beta</label>
        <label><input type="radio" value="Gamma" data-bind="checked: radioSelectedOptionValue" />Gamma</label>

        <hr />

        <!-- #19 - Привязка checked -->
        <h3>Привязка Select</h3>

        <select data-bind="options: games, optionsCaption: 'Выберите модель...', optionsValue: 'id', optionsText: 'name', value: selectedGame"></select>

        <!-- #20 - События форм -->
        <h3>События форм</h3>

        <br />

        <h4>Событие HasFocus</h4>
        <input data-bind="hasFocus: isFocused" />
        <span data-bind="visible: isFocused">Фокус получен</span>

        <br />

        <h4>Привязка Event</h4>
        <div data-bind="event: {mouseover: mouseOverHandler, mouseout: mouseOutHandler}">
            <span data-bind="style: {color: textColor}">Hello world!</span>
        </div>

        <hr />

        <!-- #21 - События форм -->
        <h3>Событие Click</h3>

        <p><button data-bind="click: clickHandler">Нажать</button></p>
        <p>Количество нажатий: <span data-bind="text: numberOfClicks"></span></p>

        <br />

        <h4>Передача параметра в обработчик</h4>
        <div data-bind="foreach: phones">
            <p>
                <span data-bind="text: $data"></span>
                <button data-bind="click: $parent.select">Выбрать</button>
            </p>
        </div>

        <hr />

        <!-- #22 - Событие submit -->
        <h3>Событие submit</h3>

        <form data-bind="submit: submitHandler">
            <input type="text" name="login" placeholder="Введите логин" />
            <input type="text" name="password" placeholder="Введите пароль" />
            <button type="submit">Отправить</button>
        </form>
    </div>
</div>
<script>
    var viewModel =
        {
            //#1 - Простой биндинг
            name: "Владимир",

            //#2 - Биндинг с условием
            hour: new Date().getHours(),

            //#3 - Observable - Отслеживаемые объекты (отслеживает изменения и при их наличии обновляет связанные компоненты)
            //  Для наблюдаемых объектов применятеся метод Observable
            //  Для получения данных: var name = viewModel.phoneName();
            //  Для записи данных: viewModel.phoneName("Samsung galaxy S10");
            phoneName: ko.observable("Samsung galaxy S6"),

            //#5 - Visible - Отображение/Скрытие элемента
            DivVisible: ko.observable(true),

            //#6 - HTML
            htmlContent: "<span style='color: red;'>Привет, KnokoutJS!</span>",

            //#7 - CSS
            cssEnabled: ko.observable(true),

            //#8 - Style
            customColor: ko.observable("purple"),

            //#9 - Attr
            attrUrl: ko.observable("onlineservice.kz"),
            attrDescription: ko.observable("Перейти на главную страницу"),

            //#10 - Binding Array to List
            phones: ["iPhone 6S", "LG G5", "Lumia 950", "Nexus 6P", "Samsung Galaxy S6"],

            //#11 - Binding object Array to List
            cars:
                [
                    {
                        mark: "Mercedes",
                        model: "G 400"
                    },
                    {
                        mark: "Mitsubishi",
                        model: "Pajero"
                    },
                    {
                        mark: "Suzuki",
                        model: "Grand Vitara"
                    }
                ],

            //#12 - ObservableArray - Наблюдаемые массивы
            friends: ko.observableArray
                (
                    [
                        new Friend("Ринат", "35"),
                        new Friend("Азамат", "35"),
                        new Friend("Бахытжан", "32"),
                        new Friend("Ануар", "39")
                    ]
                ),

            //#13 - AS - Использование псевдонима
            computers: 
                [
                    {
                        company: "HP",
                        model: "Pavillion"
                    },
                    {
                        company: "Asus",
                        model: "A8"
                    },
                    {
                        company: "Lenovo",
                        model: "G5"
                    }
                ],

            //#14 - Обратные вызовы привязки foreach
            //  Необходимо подключить JQuery
            afterAddFriend: function (element, index, data)
            {
                $(element).filter("li").css("opacity", 0.1);
                $(element).filter("li").fadeTo(2000, 1.0);
            },

            //#15 - Привязка IF и IFNOT
            IfVisible: ko.observable(true),

            //#16 - Контекст привязки
            //  Привязка with создает новый контекст привязки, благодаря чему для вложенных элементов устанавливается привязка к определенному объекту внутри ViewModel
            model: "Galaxy S7 Edge",
            price: 250000,

            company:
            {
                name: "Samsung",
                country: "Корея"
            },

            //#17 - Привязка VALUE и TEXTINPUT
            userName: ko.observable("login"),
            userRole: ko.observable("role"),

            //#18 - Привязка CHECKED
            IsVisible: ko.observable(true),

            //CheckBox
            games: ko.observableArray
                (
                    [
                        new Game(1, "Diablo", 1996, false),
                        new Game(2, "Star Craft", 1998, false),
                        new Game(3, "Heroes Might and Magic", 1999, false),
                        new Game(4, "Stalker Call of Pripyat", 2009, true),
                        new Game(5, "Witcher 3", 2015, true)
                    ]
                ),
            selectedGame: ko.observable(5),

            //RadioButton
            radioSelectedOptionValue: ko.observable("Beta"),

            //#20 - События форм
            isFocused: ko.observable(false),

            textColor: ko.observable("blue"),
            mouseOverHandler: function ()
            {
                this.textColor("red");
            },

            mouseOutHandler: function ()
            {
                this.textColor("blue");
            },

            //#21 - События форм
            numberOfClicks: ko.observable(0),
            clickHandler: function ()
            {
                var previousCount = this.numberOfClicks();
                this.numberOfClicks(previousCount + 1);
            },

            select: function (selectedPhone, event)
            {
                alert("Вы выбрали " + selectedPhone);
                console.log(event);
            },

            //#22 - Событие submit
            submitHandler: function (form)
            {
                console.log(form.elements["login"].value);
                console.log(form.elements["password"].value);

                return true;    //  Нужно чтобы отправляла форму
            }
        };
    ko.applyBindings(viewModel);

    //#3
    var Button_ChangePhoneName = document.getElementById("Button_ChangePhoneName");
    Button_ChangePhoneName.addEventListener
        (
            "click",
            function (e)
            {
                viewModel.phoneName("Samsung Galaxy S10");
            }
        );

    //#4 - Subscribe
    //  С помощью Subscribe можно отслеживать изменения в наблюдаемых объектах и выполнять определенные действия
    viewModel.phoneName.subscribe
        (
            function (newValue)
            {
                alert("Новое значение: " + newValue);
            }
        );

    //  #5
    var Button_ShowHide = document.getElementById("Button_ShowHide");
    Button_ShowHide.addEventListener
        (
            "click",
            function (e)
            {
                viewModel.DivVisible(!viewModel.DivVisible());
            }
    );

    //#7 - CSS
    var Button_ChangeCss = document.getElementById("Button_ChangeCss");
    Button_ChangeCss.addEventListener
        (
            "click",
            function (e)
            {
                viewModel.cssEnabled(!viewModel.cssEnabled());
            }
    );

    //#8 - Style
    var Button_ChangeStyle = document.getElementById("Button_ChangeStyle");
    Button_ChangeStyle.addEventListener
    (
            "click",
            function (e)
            {
                if (viewModel.customColor() == "purple")
                    viewModel.customColor("green");
                else
                    viewModel.customColor("purple");
            }
    );

    //#12 - ObservableArray - Наблюдаемые массивы
    function Friend(name, age)
    {
        this.name = name;
        this.age = age;
    }

    var Button_AddFriend = document.getElementById("Button_AddFriend");
    Button_AddFriend.addEventListener
    (
        "click",
        function (e)
        {
            viewModel.friends.push(new Friend("Арман", "36"));
        }
    );

    //#14 - Обратные вызовы привязки foreach
    //  Необходимо подключить JQuery
    var Button_AddFriendWithEvent = document.getElementById("Button_AddFriendWithEvent");
    Button_AddFriendWithEvent.addEventListener
        (
            "click",
            function (e)
            {
                viewModel.friends.push(new Friend("Азамат", "35"));
            }
        );

    //#15 - Привязка IF и IFNOT
    var Button_ShowHideIf = document.getElementById("Button_ShowHideIf");
    Button_ShowHideIf.addEventListener
        (
            "click",
            function (e)
            {
                if (viewModel.IfVisible() == true)
                    viewModel.IfVisible(false);
                else
                    viewModel.IfVisible(true);
            }
        );

    //#18 - Привязка CHECKED
    function Game(id, name, year, available)
    {
        this.id = id;
        this.name = name;
        this.year = year;
        this.available = available;
    }

</script>